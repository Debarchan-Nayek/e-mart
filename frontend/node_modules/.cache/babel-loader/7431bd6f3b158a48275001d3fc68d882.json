{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer } from \"./reducers/productReducer\";\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer } from \"./reducers/userReducer\";\nimport { cartReducer } from \"./reducers/cartReducer\";\nimport { orderReducer, orderDetailsReducer, orderPayReducer, orderListMyReducer } from \"./reducers/orderReducer\";\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst shippingAddressFromStorage = localStorage.getItem(\"shippingAddress\") ? JSON.parse(localStorage.getItem('shippingAddress')) : {};\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  orderCreate: orderReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  orderListMy: orderListMyReducer\n});\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) : [];\nconsole.log(localStorage.getItem(\"cartItems\"));\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["C:/Users/KIIT/Desktop/e-mart/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","userLoginReducer","userRegisterReducer","userDetailsReducer","userUpdateProfileReducer","cartReducer","orderReducer","orderDetailsReducer","orderPayReducer","orderListMyReducer","userInfoFromStorage","localStorage","getItem","JSON","parse","shippingAddressFromStorage","reducer","productList","productDetails","cart","userLogin","userRegister","userDetails","userUpdateProfile","orderCreate","orderDetails","orderPay","orderListMy","cartItemsFromStorage","console","log","initialState","cartItems","shippingAddress","userInfo","middleware","store"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,EAAsCC,eAAtC,QAA4D,OAA5D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,SACEC,kBADF,EAEEC,qBAFF,QAGO,2BAHP;AAIA,SACEC,gBADF,EAEEC,mBAFF,EAGEC,kBAHF,EAIEC,wBAJF,QAKO,wBALP;AAMA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SACEC,YADF,EAEEC,mBAFF,EAGEC,eAHF,EAIEC,kBAJF,QAKO,yBALP;AAOA,MAAMC,mBAAmB,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,IAAmCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAnC,GAAiF,IAA7G;AAEA,MAAMG,0BAA0B,GAAGJ,YAAY,CAACC,OAAb,CAAqB,iBAArB,IAA0CC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAA1C,GAAgG,EAAnI;AAEA,MAAMI,OAAO,GAAGrB,eAAe,CAAC;AAC9BsB,EAAAA,WAAW,EAAElB,kBADiB;AAE9BmB,EAAAA,cAAc,EAAElB,qBAFc;AAG9BmB,EAAAA,IAAI,EAAEd,WAHwB;AAI9Be,EAAAA,SAAS,EAAEnB,gBAJmB;AAK9BoB,EAAAA,YAAY,EAAEnB,mBALgB;AAM9BoB,EAAAA,WAAW,EAAEnB,kBANiB;AAO9BoB,EAAAA,iBAAiB,EAAEnB,wBAPW;AAQ9BoB,EAAAA,WAAW,EAAElB,YARiB;AAS9BmB,EAAAA,YAAY,EAAElB,mBATgB;AAU9BmB,EAAAA,QAAQ,EAAElB,eAVoB;AAW9BmB,EAAAA,WAAW,EAAElB;AAXiB,CAAD,CAA/B;AAcA,MAAMmB,oBAAoB,GAAGjB,YAAY,CAACC,OAAb,CAAqB,WAArB,IACzBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADyB,GAEzB,EAFJ;AAIAiB,OAAO,CAACC,GAAR,CAAYnB,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAZ;AAEA,MAAMmB,YAAY,GAAG;AACnBZ,EAAAA,IAAI,EAAE;AACJa,IAAAA,SAAS,EAAEJ,oBADP;AAEJK,IAAAA,eAAe,EAAElB;AAFb,GADa;AAKnBK,EAAAA,SAAS,EAAE;AAAEc,IAAAA,QAAQ,EAAExB;AAAZ;AALQ,CAArB;AAOA,MAAMyB,UAAU,GAAG,CAACtC,KAAD,CAAnB;AACA,MAAMuC,KAAK,GAAG1C,WAAW,CACrBsB,OADqB,EAErBe,YAFqB,EAGrBjC,mBAAmB,CAACF,eAAe,CAAC,GAAGuC,UAAJ,CAAhB,CAHE,CAAzB;AAMA,eAAeC,KAAf","sourcesContent":["import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport {\r\n  productListReducer,\r\n  productDetailsReducer,\r\n} from \"./reducers/productReducer\"; \r\nimport {\r\n  userLoginReducer,\r\n  userRegisterReducer,\r\n  userDetailsReducer,\r\n  userUpdateProfileReducer,\r\n} from \"./reducers/userReducer\";\r\nimport { cartReducer } from \"./reducers/cartReducer\";\r\nimport {\r\n  orderReducer,\r\n  orderDetailsReducer,\r\n  orderPayReducer,\r\n  orderListMyReducer,\r\n} from \"./reducers/orderReducer\";\r\n\r\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')): null\r\n\r\nconst shippingAddressFromStorage = localStorage.getItem(\"shippingAddress\") ? JSON.parse(localStorage.getItem('shippingAddress')) : {};\r\n\r\nconst reducer = combineReducers({\r\n  productList: productListReducer,\r\n  productDetails: productDetailsReducer,\r\n  cart: cartReducer,\r\n  userLogin: userLoginReducer,\r\n  userRegister: userRegisterReducer,\r\n  userDetails: userDetailsReducer,\r\n  userUpdateProfile: userUpdateProfileReducer,\r\n  orderCreate: orderReducer,\r\n  orderDetails: orderDetailsReducer,\r\n  orderPay: orderPayReducer,\r\n  orderListMy: orderListMyReducer,\r\n});\r\n\r\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\")\r\n  ? JSON.parse(localStorage.getItem(\"cartItems\"))\r\n  : [];\r\n\r\nconsole.log(localStorage.getItem(\"cartItems\"));\r\n\r\nconst initialState = {\r\n  cart: {\r\n    cartItems: cartItemsFromStorage,\r\n    shippingAddress: shippingAddressFromStorage,\r\n  },\r\n  userLogin: { userInfo: userInfoFromStorage },\r\n};\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n    reducer, \r\n    initialState, \r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n    );\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}